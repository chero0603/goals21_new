/**
 * „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥Áî®„ÅÆJavaScript„É¢„Ç∏„É•„Éº„É´
 */

// „Éê„É™„Éá„Éº„Ç∑„Éß„É≥Èñ¢Êï∞
const validators = {
  // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
  required: value => {
    return value.trim().length > 0;
  },

  // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  email: value => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(value);
  },

  // ÈõªË©±Áï™Âè∑„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÔºàÊó•Êú¨ÂΩ¢ÂºèÔºâ
  phone: value => {
    const phoneRegex =
      /^(0[1-9]\d{0,3}-?\d{1,4}-?\d{4}|050-?\d{4}-?\d{4}|070-?\d{4}-?\d{4}|080-?\d{4}-?\d{4}|090-?\d{4}-?\d{4})$/;
    return phoneRegex.test(value.replace(/[\s\-]/g, ''));
  },

  // ÊúÄÂ∞èÊñáÂ≠óÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
  minLength: (value, min) => {
    return value.trim().length >= min;
  },

  // ÊúÄÂ§ßÊñáÂ≠óÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
  maxLength: (value, max) => {
    return value.trim().length <= max;
  },
};

// „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
const errorMessages = {
  required: '„Åì„ÅÆÈ†ÖÁõÆ„ÅØÂøÖÈ†à„Åß„Åô',
  email: 'Ê≠£„Åó„ÅÑ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  phone: 'Ê≠£„Åó„ÅÑÈõªË©±Áï™Âè∑„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  minLength: min => `${min}ÊñáÂ≠ó‰ª•‰∏ä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`,
  maxLength: max => `${max}ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ`,
  name: {
    required: '„ÅäÂêçÂâç„ÅØÂøÖÈ†à„Åß„Åô',
    maxLength: '„ÅäÂêçÂâç„ÅØ50ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
  email: {
    required: '„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÂøÖÈ†à„Åß„Åô',
    email: 'Ê≠£„Åó„ÅÑ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
  phone: {
    required: 'ÈõªË©±Áï™Âè∑„ÅØÂøÖÈ†à„Åß„Åô',
    phone: 'Ê≠£„Åó„ÅÑÈõªË©±Áï™Âè∑„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
  subject: {
    required: '‰ª∂Âêç„ÅØÂøÖÈ†à„Åß„Åô',
    maxLength: '‰ª∂Âêç„ÅØ100ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
  message: {
    required: '„ÅäÂïè„ÅÑÂêà„Çè„ÅõÂÜÖÂÆπ„ÅØÂøÖÈ†à„Åß„Åô',
    minLength: '„ÅäÂïè„ÅÑÂêà„Çè„ÅõÂÜÖÂÆπ„ÅØ10ÊñáÂ≠ó‰ª•‰∏ä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
    maxLength: '„ÅäÂïè„ÅÑÂêà„Çè„ÅõÂÜÖÂÆπ„ÅØ2000ÊñáÂ≠ó‰ª•ÂÜÖ„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
  inquiry_type: {
    required: '„ÅäÂïè„ÅÑÂêà„Çè„ÅõÁ®ÆÂà•„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
  },
};

// „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´
const validationRules = {
  name: [{ type: 'required' }, { type: 'maxLength', value: 50 }],
  email: [{ type: 'required' }, { type: 'email' }],
  phone: [{ type: 'required' }, { type: 'phone' }],
  subject: [{ type: 'required' }, { type: 'maxLength', value: 100 }],
  message: [
    { type: 'required' },
    { type: 'minLength', value: 10 },
    { type: 'maxLength', value: 2000 },
  ],
  inquiry_type: [{ type: 'required' }],
};

// „Éï„Ç£„Éº„É´„Éâ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
function validateField(fieldName, value) {
  const rules = validationRules[fieldName];
  if (!rules) return { isValid: true, errors: [] };

  const errors = [];

  for (const rule of rules) {
    let isValid = false;

    switch (rule.type) {
      case 'required':
        isValid = validators.required(value);
        break;
      case 'email':
        isValid = !value || validators.email(value); // Á©∫„ÅÆÂ†¥Âêà„ÅØrequired„Åß„ÉÅ„Çß„ÉÉ„ÇØ
        break;
      case 'phone':
        isValid = !value || validators.phone(value);
        break;
      case 'minLength':
        isValid = !value || validators.minLength(value, rule.value);
        break;
      case 'maxLength':
        isValid = validators.maxLength(value, rule.value);
        break;
    }

    if (!isValid) {
      const fieldMessages = errorMessages[fieldName];
      if (fieldMessages && fieldMessages[rule.type]) {
        errors.push(fieldMessages[rule.type]);
      } else if (typeof errorMessages[rule.type] === 'function') {
        errors.push(errorMessages[rule.type](rule.value));
      } else {
        errors.push(errorMessages[rule.type] || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
      }
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

// „Ç®„É©„ÉºË°®Á§∫
function showFieldError(fieldName, errors) {
  const field = document.getElementById(fieldName);
  if (!field) return;

  // Êó¢Â≠ò„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂâäÈô§
  removeFieldError(fieldName);

  if (errors.length > 0) {
    // „Éï„Ç£„Éº„É´„Éâ„Å´„Ç®„É©„Éº„ÇØ„É©„Çπ„ÇíËøΩÂä†
    field.classList.add('border-red-500', 'ring-red-500');
    field.classList.remove('border-slate-300');

    // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    const errorDiv = document.createElement('div');
    errorDiv.className = 'mt-1 text-sm text-red-600';
    errorDiv.setAttribute('id', `${fieldName}-error`);
    errorDiv.textContent = errors[0]; // ÊúÄÂàù„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„ÅøË°®Á§∫

    field.parentNode.appendChild(errorDiv);
  }
}

// „Ç®„É©„ÉºË°®Á§∫„ÇíÂâäÈô§
function removeFieldError(fieldName) {
  const field = document.getElementById(fieldName);
  const errorDiv = document.getElementById(`${fieldName}-error`);

  if (field) {
    field.classList.remove('border-red-500', 'ring-red-500');
    field.classList.add('border-slate-300');
  }

  if (errorDiv) {
    errorDiv.remove();
  }
}

// „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº„ÇíÂâäÈô§
function clearAllErrors() {
  Object.keys(validationRules).forEach(fieldName => {
    removeFieldError(fieldName);
  });
}

// „Éï„Ç©„Éº„É†ÂÖ®‰Ωì„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
function validateForm(formData) {
  const results = {};
  let isFormValid = true;

  Object.keys(validationRules).forEach(fieldName => {
    const value = formData.get(fieldName) || '';
    const result = validateField(fieldName, value);
    results[fieldName] = result;

    if (!result.isValid) {
      isFormValid = false;
    }
  });

  return {
    isValid: isFormValid,
    results,
  };
}

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº
function updateCharacterCount(fieldName, maxLength) {
  const field = document.getElementById(fieldName);
  const counterId = `${fieldName}-count`;

  if (!field) return;

  let counter = document.getElementById(counterId);
  if (!counter) {
    counter = document.createElement('div');
    counter.id = counterId;
    counter.className = 'mt-1 text-sm text-slate-500 text-right';
    field.parentNode.appendChild(counter);
  }

  const currentLength = field.value.length;
  counter.textContent = `${currentLength}/${maxLength}ÊñáÂ≠ó`;

  if (currentLength > maxLength) {
    counter.classList.add('text-red-600');
    counter.classList.remove('text-slate-500');
  } else {
    counter.classList.remove('text-red-600');
    counter.classList.add('text-slate-500');
  }
}

// „É™„Ç¢„É´„Çø„Ç§„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
function setupRealtimeValidation() {
  Object.keys(validationRules).forEach(fieldName => {
    const field = document.getElementById(fieldName);
    if (!field) return;

    // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº„ÅÆË®≠ÂÆö
    const maxLengthRule = validationRules[fieldName].find(
      rule => rule.type === 'maxLength'
    );
    if (maxLengthRule) {
      field.addEventListener('input', () => {
        updateCharacterCount(fieldName, maxLengthRule.value);
      });
      // ÂàùÊúüË°®Á§∫
      updateCharacterCount(fieldName, maxLengthRule.value);
    }

    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    field.addEventListener('blur', () => {
      const value = field.value;
      const result = validateField(fieldName, value);

      if (!result.isValid) {
        showFieldError(fieldName, result.errors);
      } else {
        removeFieldError(fieldName);
      }
    });

    // ÂÖ•Âäõ‰∏≠„ÅØ„Ç®„É©„Éº„Çí‰∏ÄÊôÇÁöÑ„Å´ÈùûË°®Á§∫
    field.addEventListener('input', () => {
      if (field.classList.contains('border-red-500')) {
        removeFieldError(fieldName);
      }
    });
  });
}

// ÈÄöÁü•„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫ÔºàÊã°ÂºµÁâàÔºâ
function showNotification(message, type = 'success', duration = 5000) {
  // Êó¢Â≠ò„ÅÆÈÄöÁü•„ÅÆ‰ΩçÁΩÆ„ÇíË™øÊï¥
  const existingNotifications = document.querySelectorAll('.notification');
  existingNotifications.forEach((notification, index) => {
    const currentBottom = parseInt(notification.style.bottom) || 32;
    notification.style.bottom = `${currentBottom + 80}px`;
    notification.style.transition = 'all 0.3s ease-in-out';
  });

  const notification = document.createElement('div');
  notification.className = `notification fixed left-1/2 transform -translate-x-1/2 z-50 max-w-md w-11/12 sm:w-auto rounded-lg border px-6 py-4 shadow-xl transition-all duration-500 translate-y-full`;
  notification.style.bottom = '32px'; // ÂàùÊúü‰ΩçÁΩÆ

  // „Ç¢„Ç§„Ç≥„É≥„ÇíËøΩÂä†
  let icon = '';
  if (type === 'success') {
    notification.classList.add(
      'bg-green-50',
      'border-green-200',
      'text-green-800'
    );
    icon = '‚úÖ';
  } else if (type === 'error') {
    notification.classList.add('bg-red-50', 'border-red-200', 'text-red-800');
    icon = '‚ùå';
  } else if (type === 'warning') {
    notification.classList.add(
      'bg-yellow-50',
      'border-yellow-200',
      'text-yellow-800'
    );
    icon = '‚ö†Ô∏è';
  } else {
    notification.classList.add(
      'bg-blue-50',
      'border-blue-200',
      'text-blue-800'
    );
    icon = 'üí°';
  }

  notification.innerHTML = `
    <div class="flex items-start space-x-3">
      <div class="flex-shrink-0 text-xl">${icon}</div>
      <div class="flex-1 min-w-0">
        <div class="text-sm font-medium leading-relaxed text-center sm:text-left">${message}</div>
      </div>
      <button class="flex-shrink-0 ml-2 text-current opacity-70 hover:opacity-100 focus:outline-none transition-opacity" onclick="closeNotification(this.parentElement.parentElement)">
        <span class="sr-only">Èñâ„Åò„Çã</span>
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  `;

  document.body.appendChild(notification);

  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ôºà‰∏ã„Åã„Çâ‰∏ä„Å´„Çπ„É©„Ç§„Éâ„Ç§„É≥Ôºâ
  setTimeout(() => {
    notification.classList.remove('translate-y-full');
  }, 100);

  // Ëá™ÂãïÂâäÈô§Ôºà‰∏ã„Å´„Çπ„É©„Ç§„Éâ„Ç¢„Ç¶„ÉàÔºâ
  setTimeout(() => {
    if (notification.parentNode) {
      notification.classList.add('translate-y-full');
      setTimeout(() => {
        notification.remove();
        // ÊÆã„Å£„ÅüÈÄöÁü•„ÅÆ‰ΩçÁΩÆ„ÇíÂÜçË™øÊï¥
        adjustNotificationPositions();
      }, 500);
    }
  }, duration);
}

// ÈÄöÁü•„ÅÆ‰ΩçÁΩÆ„ÇíÂÜçË™øÊï¥„Åô„ÇãÈñ¢Êï∞
function adjustNotificationPositions() {
  const notifications = document.querySelectorAll('.notification');
  notifications.forEach((notification, index) => {
    notification.style.bottom = `${32 + index * 80}px`;
    notification.style.transition = 'all 0.3s ease-in-out';
  });
}

// ÈÄöÁü•„ÇíÈñâ„Åò„ÇãÈñ¢Êï∞
function closeNotification(notification) {
  notification.classList.add('translate-y-full');
  setTimeout(() => {
    notification.remove();
    adjustNotificationPositions();
  }, 500);
}

// „Ç∞„É≠„Éº„Éê„É´„Çπ„Ç≥„Éº„Éó„Å´Èñ¢Êï∞„ÇíËøΩÂä†
window.closeNotification = closeNotification;

// „Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°Âá¶ÁêÜ
async function handleFormSubmit(form) {
  const formData = new FormData(form);

  // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  const validation = validateForm(formData);

  // „Ç®„É©„ÉºË°®Á§∫
  Object.keys(validation.results).forEach(fieldName => {
    const result = validation.results[fieldName];
    if (!result.isValid) {
      showFieldError(fieldName, result.errors);
    } else {
      removeFieldError(fieldName);
    }
  });

  if (!validation.isValid) {
    // „Ç®„É©„Éº„ÅÆ„ÅÇ„ÇãÈ†ÖÁõÆÊï∞„Çí„Ç´„Ç¶„É≥„Éà
    const errorCount = Object.values(validation.results).filter(
      result => !result.isValid
    ).length;
    const errorMessage = `ÂÖ•ÂäõÂÜÖÂÆπ„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑÔºà${errorCount}‰ª∂„ÅÆ„Ç®„É©„ÉºÔºâ`;

    showNotification(errorMessage, 'warning', 6000);

    // ÊúÄÂàù„ÅÆ„Ç®„É©„Éº„Éï„Ç£„Éº„É´„Éâ„Å´„Éï„Ç©„Éº„Ç´„Çπ
    const firstErrorField = Object.keys(validation.results).find(
      fieldName => !validation.results[fieldName].isValid
    );
    if (firstErrorField) {
      const field = document.getElementById(firstErrorField);
      if (field) {
        field.focus();
        field.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }

    return false;
  }

  // ÈÄÅ‰ø°„Éú„Çø„É≥„ÅÆÁÑ°ÂäπÂåñ„Å®„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
  const submitButton = form.querySelector('button[type="submit"]');
  const originalText = submitButton.textContent;
  submitButton.disabled = true;
  submitButton.classList.add('opacity-75', 'cursor-not-allowed');
  submitButton.innerHTML = `
    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    ÈÄÅ‰ø°‰∏≠...
  `;

  // ÈÄÅ‰ø°ÈñãÂßã„ÅÆÈÄöÁü•
  showNotification('„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÈÄÅ‰ø°„Åó„Å¶„ÅÑ„Åæ„Åô...', 'info', 2000);

  try {
    // ÈñãÁô∫Áí∞Â¢É„Å®Êú¨Áï™Áí∞Â¢É„Åß„ÅÆÂá¶ÁêÜÂàÜÂ≤ê
    const isLocalhost =
      window.location.hostname.includes('localhost') ||
      window.location.hostname.includes('127.0.0.1');

    let result;

    if (isLocalhost) {
      // ÈñãÁô∫Áí∞Â¢ÉÔºö„É¢„ÉÉ„ÇØ„É¨„Çπ„Éù„É≥„Çπ
      console.log('Development mode: Using mock response');
      console.log('Form data:', Object.fromEntries(formData));

      // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶„É™„Ç¢„É´„Å™‰ΩìÈ®ì„ÇíÊèê‰æõ
      await new Promise(resolve => setTimeout(resolve, 1000));

      result = {
        success: true,
        message:
          '„ÄêÈñãÁô∫Áí∞Â¢É„Äë„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇÂÆüÈöõ„ÅÆ„É°„Éº„É´ÈÄÅ‰ø°„ÅØÊú¨Áï™Áí∞Â¢É„Åß„ÅÆ„ÅøË°å„Çè„Çå„Åæ„Åô„ÄÇ',
      };
    } else {
      // Êú¨Áï™Áí∞Â¢ÉÔºöÂÆüÈöõ„ÅÆPHP„Çπ„ÇØ„É™„Éó„Éà„Å´ÈÄÅ‰ø°
      console.log('Production mode: Submitting to PHP script');

      // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Å®IP„Ç¢„Éâ„É¨„Çπ„ÇíËøΩÂä†
      formData.append('timestamp', new Date().toISOString());
      formData.append('client_ip', 'browser');

      const phpUrl = window.location.pathname.includes('/lp/')
        ? '/lp/mail.php'
        : '/mail.php';

      const response = await fetch(phpUrl, {
        method: 'POST',
        body: formData,
      });

      // „É¨„Çπ„Éù„É≥„Çπ„ÅÆÂá¶ÁêÜ
      const contentType = response.headers.get('content-type');

      if (contentType && contentType.includes('application/json')) {
        result = await response.json();
      } else {
        // PHP„Çπ„ÇØ„É™„Éó„Éà„Åã„Çâ„ÅÆ„É¨„Çπ„Éù„É≥„ÇπÔºàJSONÂΩ¢Âºè„Åß„Å™„ÅÑÂ†¥ÂêàÔºâ
        const text = await response.text();
        console.log('PHP Response:', text);

        try {
          result = JSON.parse(text);
        } catch (e) {
          // JSON„Éë„Éº„Çπ„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà
          if (response.ok) {
            result = {
              success: true,
              message: '„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ',
            };
          } else {
            console.error('PHP script error:', text);
            result = {
              success: false,
              message:
                '„É°„Éº„É´ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
            };
          }
        }
      }
    }

    if (result.success) {
      // ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ
      showNotification(result.message, 'success', 8000);
      form.reset();
      clearAllErrors();

      // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº„ÇÇ„É™„Çª„ÉÉ„Éà
      Object.keys(validationRules).forEach(fieldName => {
        const maxLengthRule = validationRules[fieldName].find(
          rule => rule.type === 'maxLength'
        );
        if (maxLengthRule) {
          updateCharacterCount(fieldName, maxLengthRule.value);
        }
      });

      // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„Éï„Ç©„Éº„É†„Éá„Éº„Çø„ÇíÂâäÈô§
      localStorage.removeItem('contact_form_data');

      // ÈÄÅ‰ø°ÊàêÂäüÂæå„Å´„Çµ„É≥„ÇØ„Çπ„Éö„Éº„Ç∏„Å∏ÈÅ∑ÁßªÔºàÈÄöÁü•Ë°®Á§∫„ÅÆ„Åü„ÇÅÁü≠„ÅÑÈÅÖÂª∂Ôºâ
      setTimeout(() => {
        // Astro „ÅÆ base '/lp/' „ÇíËÄÉÊÖÆ„Åó„ÅüÈÅ∑Áßª
        const base = '/lp';
        window.location.href = `${base}/thanks`;
      }, 600);
    } else {
      // „Ç®„É©„ÉºÊôÇ„ÅÆÂá¶ÁêÜ
      let errorMessage = result.message || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
      let notificationType = 'error';

      // „Ç®„É©„Éº„ÅÆÁ®ÆÈ°û„Å´Âøú„Åò„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË™øÊï¥
      if (result.error_type === 'validation') {
        errorMessage = result.message;
        notificationType = 'warning';

        // „Çµ„Éº„Éê„Éº„Çµ„Ç§„Éâ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÇíË°®Á§∫
        if (result.errors && Array.isArray(result.errors)) {
          result.errors.forEach((error, index) => {
            setTimeout(() => {
              showNotification(`${index + 1}. ${error}`, 'warning', 4000);
            }, index * 500);
          });
        }
      } else if (result.error_type === 'mail_send') {
        // „É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÄÅË©≥Á¥∞ÊÉÖÂ†±„ÇíÂê´„ÇÅ„Çã
        if (result.details && result.details.contact_info) {
          errorMessage += `<br><br>üìû ${result.details.contact_info}`;
        }
      } else if (result.error_type === 'system_error') {
        // „Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÄÅÈÄ£Áµ°ÂÖàÊÉÖÂ†±„ÇíË°®Á§∫
        if (result.details) {
          errorMessage += `<br><br>üìû ${result.details.contact_info || ''}`;
          if (result.details.email_info) {
            errorMessage += `<br>üìß ${result.details.email_info}`;
          }
        }
      }

      showNotification(errorMessage, notificationType, 10000);

      // „Éï„Ç©„Éº„É†„ÅÆÂÖàÈ†≠„Å´„Çπ„ÇØ„É≠„Éº„É´Ôºà„Ç®„É©„ÉºÁ¢∫Ë™ç„ÅÆ„Åü„ÇÅÔºâ
      form.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  } catch (error) {
    console.error('Form submission error:', error);

    let errorMessage = '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';

    if (error.name === 'TypeError') {
      errorMessage +=
        'Êé•Á∂ö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
    } else if (error.name === 'SyntaxError') {
      errorMessage += '„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆÂøúÁ≠î„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ';
    } else {
      errorMessage += 'ÊôÇÈñì„Çí„Åä„ÅÑ„Å¶ÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
    }

    errorMessage +=
      '<br><br>ÂïèÈ°å„ÅåÁ∂ö„ÅèÂ†¥Âêà„ÅØ„ÄÅ„ÅäÈõªË©±„Å´„Å¶„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ<br>üìû 03-5201-3756 (Âπ≥Êó• 9:00-18:00)';

    showNotification(errorMessage, 'error', 12000);
  } finally {
    // ÈÄÅ‰ø°„Éú„Çø„É≥„ÇíÂÖÉ„Å´Êàª„Åô
    submitButton.disabled = false;
    submitButton.classList.remove('opacity-75', 'cursor-not-allowed');
    submitButton.innerHTML = originalText;
  }

  return false;
}

// ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', function () {
  setupRealtimeValidation();

  const form = document.getElementById('contact-form');
  if (form) {
    form.addEventListener('submit', function (event) {
      event.preventDefault();
      handleFormSubmit(form);
    });
  }
});

// „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºà„É¢„Ç∏„É•„Éº„É´„Å®„Åó„Å¶‰ΩøÁî®„Åô„ÇãÂ†¥ÂêàÔºâ
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    validateField,
    validateForm,
    showFieldError,
    removeFieldError,
    clearAllErrors,
    showNotification,
    handleFormSubmit,
  };
}
